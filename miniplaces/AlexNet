import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import tensorflow as tf
from tqdm import tnrange
import time
import os
import sys
sys.path = ['/scratch/nhunt/cv_parker/scripts'] + sys.path
from utils import tf_init, get_next_run_num, load_data, output_file

config = tf_init()
train_inputs, train_labels, val_inputs, val_labels, test_inputs = load_data('miniplaces')

graph = tf.Graph()
with graph.as_default():
    labels = tf.placeholder(tf.int32, shape=None)
    img = tf.placeholder(tf.float32, (None, 128, 128, 3))

    layers = [
        tf.layers.Conv2D(96, 11, 4, padding='SAME', activation=tf.nn.relu),  # image size reduces to 32 * 32
        tf.layers.MaxPooling2D(3, 2, padding='SAME'),  # image size reduces to 16 * 16
        tf.layers.Conv2D(256, 5, padding='SAME', activation=tf.nn.relu),
        tf.layers.MaxPooling2D(3, 2, padding='SAME'),  # image size reduces to 8 * 8
        tf.layers.Conv2D(384, 3, padding='SAME', activation=tf.nn.relu),
        tf.layers.Conv2D(384, 3, padding='SAME', activation=tf.nn.relu),
        tf.layers.Conv2D(256, 3, padding='SAME', activation=tf.nn.relu),
        tf.layers.MaxPooling2D(3, 2, padding='SAME'),  # image size reduces to 4 * 4
        tf.layers.Flatten(),
        tf.layers.Dropout(0.5),
        tf.layers.Dense(4096, activation=tf.nn.relu),
        tf.layers.Dropout(0.5),
        tf.layers.Dense(4096, activation=tf.nn.relu)
    ]

    hidden = img
    for layer in layers:
        hidden = layer(hidden)

    logits = tf.layers.Dense(100, activation=None)(hidden)
    preds = tf.nn.softmax(logits)
    loss_op = tf.losses.sparse_softmax_cross_entropy(labels, logits)
    train_op = tf.train.AdagradOptimizer(.001).minimize(loss_op)

    _, acc_op = tf.metrics.accuracy(labels, tf.argmax(preds, axis=1))

    global_init = tf.global_variables_initializer()
    local_init = tf.local_variables_initializer()

batch_size = 128

train_idx = list(range(len(train_labels)))
val_idx = list(range(len(val_labels)))

sess = tf.Session(config=config, graph=graph)
sess.run(global_init)

n_epochs = 20

n_epochs = 20

for epoch in range(n_epochs):
    np.random.shuffle(train_idx)
    sess.run(local_init)
    train_loss = []
    for batch in range(int(np.ceil(len(train_labels) / batch_size))):
        batch_idx = train_idx[batch * batch_size: (batch + 1) * batch_size]
    loss, train_acc, _ = sess.run([loss_op, acc_op, train_op],
                                  {img: train_inputs[batch_idx], labels: train_labels[batch_idx]})
    train_loss.append(loss)
    sess.run(local_init)
    val_loss = []
    for batch in range(int(np.ceil(len(val_labels) / batch_size))):
        batch_idx = val_idx[batch * batch_size: (batch + 1) * batch_size]
    loss, val_acc = sess.run([loss_op, acc_op], {img: val_inputs[batch_idx], labels: val_labels[batch_idx]})
    val_loss.append(loss)
    print(f"Epoch {epoch}. Train Loss: {np.mean(train_loss):.3f}; Val Loss: {np.mean(val_loss):.3f}. Train Acc: {train_acc:.3f}; Val Acc: {val_acc:.3f}")
print('Done!')